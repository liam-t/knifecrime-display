{"version":3,"sources":["modeling/dataPoint.js","modeling/knifeCrimeDataPointsByRegion.js","modeling/quarterlyAverages.js","components/Animator.jsx","components/KnifeGraph/helpers/getContinuousPath.js","components/KnifeGraph/helpers/getTimeObj.js","components/KnifeGraph/helpers/getXScale.js","components/KnifeGraph/helpers/getYScale.js","components/KnifeGraph/helpers/genPoints.js","components/KnifeGraph/YAxis.jsx","components/KnifeGraph/XAxis.jsx","components/KnifeGraph/Grid.jsx","components/KnifeGraph/HoverLines.jsx","components/KnifeGraph/QuarterlyAverageLine.jsx","components/KnifeGraph/Tooltip.jsx","components/KnifeGraph/Svg.jsx","components/KnifeGraph/pathSections/collar.js","components/KnifeGraph/pathSections/graph.js","components/KnifeGraph/pathSections/handle.js","components/KnifeGraph/pathSections/tip.js","components/KnifeGraph/index.jsx","globalStyle.js","components/RegionSelector.jsx","App.jsx","serviceWorker.js","index.js"],"names":["point","PT","shape","year","string","isRequired","quarter","oneOf","knifeCrime","number","region","total","name","points","arrayOf","Animator","className","path","React","useState","flubberPaths","setFlubberPaths","useEffect","oldFlubberPaths","spring1","useSpring","t","from","reset","config","mass","tension","friction","clamp","velocity","flubberPath","flubber","maxSegmentLength","d","interpolate","defaultProps","memo","prevProps","newProps","getContinuousPath","shouldReplaceStart","shouldReplaceEnd","rtn","replace","getTimeObj","split","quarterNum","Number","startOfFinancialYear","Date","dateOffsetByQuarter","setMonth","getMonth","getXScale","width","activeData","scaleD3","leftOffset","timeDomain","length","xRange","xScale","nice","getYScale","height","allData","extentD3","yRange","allDataFlatPoints","reduce","acc","map","allDataFlatPointsPadded","valDomain","yScale","constant","genPoints","YAxis","compiledScale","color","ref","useRef","axisGen","axisLeft","ticks","select","current","call","selectAll","classed","_","i","Axis","transform","styled","g","p","XAxis","topOffset","axisTop","style","attr","Grid","d3Scale","yDivisionsAmount","range","showLineExtression","keys","Array","nanoid","GridWrap","key","LineY","x1","y1","x2","y2","line","HoverLines","compiledXScale","compiledYScale","onSelectedPointChange","selectedPoint","range1","tickWidth","handleMouseLeave","HoverLinesWrap","xPos","yPos","Point","Line","Circle","r","cx","cy","Hover","x","y","onMouseLeave","onMouseEnter","rect","circle","QuarterlyAverageLine","data","thePath","QuarterlyAverageLineEl","Tooltip","springX","springY","TooltipWrap","Bg","intVal","scaledHeight","Year","fontSize","dy","Stat","duration","delay","end","separator","preserveValue","countUpRef","animated","text","Svg","avgData","pathCreators","activeYScale","scaleSymlog","scaleLinear","innerWidth","Math","max","pad","innerHeight","cappedInnerHeight","min","widthPercentages","tip","graph","collar","handle","getWidth","names","flatArraySafe","isArray","item","scaleTime","yScaleRange","extent","tipPathSection","getTipPath","compPath","paths","joined","joinPaths","getGraphPath","getCollarPath","getHandlePath","SvgEl","CenterTransform","PadTransform","TipFix","AnimatorStyled","svg","keyframes","getCollar","w","h","l","radius","getGraph","getHandle","scaleFactor","scaledPathContinuous","svgpath","scale","translate","toString","getTip","KnifeGraph","setSelectedPoint","setWidth","setHeight","KnifeGraphWrap","handleWidth","handleHeight","onResize","newWidth","newHeight","div","GlobalStyle","createGlobalStyle","RegionSelector","onChange","selectedRegion","options","value","label","reverse","RegionSelectorWrap","isSearchable","App","setSelectedRegion","selectedRegionData","knifeCrimeDataPointsByRegion","find","AppWrap","Header","Titling","Title","Subtitle","GraphWrap","Decoration","quarterlyAverages","h1","h2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7139fe5d.chunk.js","sourcesContent":["import PT from 'prop-types';\n\nconst point = PT.shape({\n  year: PT.string.isRequired,\n  quarter: PT.oneOf(['Q1', 'Q2', 'Q3', 'Q4']).isRequired,\n  knifeCrime: PT.number.isRequired,\n});\n\nexport default point;\n","import PT from 'prop-types';\nimport point from './dataPoint.js';\n\nexport const region = PT.shape({\n  total: PT.number.isRequired,\n  name: PT.string.isRequired,\n  points: PT.arrayOf(point).isRequired,\n});\n\nexport default PT.arrayOf(region);\n","import PT from 'prop-types';\nimport point from './dataPoint.js';\n\nexport default PT.arrayOf(point);\n","import React from 'react';\nimport PT from 'prop-types';\nimport { interpolate as flubber } from 'flubber';\nimport { useSpring, animated } from 'react-spring';\n\nconst propTypes = {\n  className: PT.string,\n  path: PT.string.isRequired,\n};\nconst defaultProps = {\n  className: '',\n};\n\nconst Animator = ({ className, path }) => {\n  const [flubberPaths, setFlubberPaths] = React.useState([path, path]);\n\n  React.useEffect(() => {\n    setFlubberPaths((oldFlubberPaths) => [\n      oldFlubberPaths[1], path,\n    ]);\n  }, [path]);\n\n  const spring1 = useSpring({\n    t: 1,\n    from: { t: 0 },\n    reset: true,\n    config: {\n      mass: 0.5,\n      tension: 350,\n      friction: 50,\n      clamp: true,\n      velocity: 10,\n    },\n  });\n\n  const flubberOptions = { maxSegmentLength: 5 };\n\n  const flubberPath = flubber(...flubberPaths, flubberOptions);\n  return (\n    <animated.path\n      className={className}\n      d={spring1.t.interpolate((t) => flubberPath(t))}\n    />\n  );\n};\nAnimator.propTypes = propTypes;\nAnimator.defaultProps = defaultProps;\n\nexport default React.memo(Animator, (prevProps, newProps) => (\n  prevProps.path === newProps.path\n));\n","const getContinuousPath = (path, shouldReplaceStart = true, shouldReplaceEnd = true) => {\n  let rtn = `${path}`;\n  if (shouldReplaceStart) rtn = rtn.replace(/^M/, 'L');\n  if (shouldReplaceEnd) rtn = rtn.replace(/z$/, '');\n  return rtn;\n};\n\nexport default getContinuousPath;\n","const getTimeObj = (point) => {\n  const [year] = point.year.split('/');\n  const quarterNum = Number(point.quarter.split('')[1]);\n\n  const startOfFinancialYear = new Date(year, 4);\n  const dateOffsetByQuarter = (\n    startOfFinancialYear.setMonth(startOfFinancialYear.getMonth() + quarterNum * 3)\n  );\n  return new Date(dateOffsetByQuarter);\n};\n\nexport default getTimeObj;\n","/**\n *\n * @param {number} width context width in px\n * @param {Object} activeData active data object, see prop types for scheme\n * @param {function} getTimeObj function to get time object and return standard js time obj\n * @param {function} scaleD3 a D3 scale function\n * @param {number} leftOffset left offset in px, default 0\n */\nconst getXScale = (width, activeData, getTimeObj, scaleD3, leftOffset = 0) => {\n  const timeDomain = [\n    getTimeObj(activeData.points[0]),\n    getTimeObj(activeData.points[activeData.points.length - 1]),\n  ];\n  const xRange = [leftOffset, leftOffset + width];\n  const xScale = scaleD3(timeDomain, xRange);\n  return xScale.nice();\n};\n\nexport default getXScale;\n","/**\n *\n * @param {number} height context height in px\n * @param {Array} allData an array of data objects, see prop types for schema\n * @param {function} extentD3 d3's extent function\n * @param {function} scaleD3 a d3 scale function\n */\nconst getYScale = (\n  height,\n  allData,\n  extentD3,\n  scaleD3,\n  yRange = [0, height],\n) => {\n  const allDataFlatPoints = allData.reduce((acc, { points }) => ([\n    ...acc,\n    ...points.map(({ knifeCrime }) => knifeCrime),\n  ]), []);\n  const allDataFlatPointsPadded = [\n    ...allDataFlatPoints,\n    allDataFlatPoints[allDataFlatPoints.length - 1] * 1.2,\n  ];\n  const valDomain = extentD3(allDataFlatPointsPadded);\n  const yScale = scaleD3(valDomain, yRange);\n  if (typeof yScale.constant === 'function') yScale.constant(500);\n  return yScale;\n};\n\nexport default getYScale;\n","/**\n *\n * @param {Array} activeData array of region objects as specified in proptypes\n * @param {function} xScale generated d3 scale function\n * @param {function} getTimeObj function to create correct js time object from data\n * @param {function} yScale generated d3 scale function\n * @return {string} returns a path string\n */\nconst genPoints = (activeData, xScale, getTimeObj, yScale) => (\n  activeData.points.map((point) => (\n    [xScale(getTimeObj(point)), yScale(point.knifeCrime)]\n  ))\n);\n\nexport default genPoints;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport { axisLeft, select } from 'd3';\n\nconst propTypes = {\n  compiledScale: PT.func.isRequired,\n  leftOffset: PT.number,\n  color: PT.string,\n};\nconst defaultProps = {\n  leftOffset: 0,\n  color: 'white',\n};\n\nconst YAxis = ({ compiledScale, leftOffset, color }) => {\n  const ref = React.useRef(null);\n  const axisGen = axisLeft(compiledScale.nice())\n    .ticks(15, '.0s');\n  const d3Axis = select(ref.current).call(axisGen);\n  d3Axis.selectAll('.tick')\n    .classed('minor', (_, i) => i % 5 !== 0)\n    .classed('desktop-only', (_, i) => i % 5 !== 0);\n  return (\n    <Axis\n      transform={`translate(${leftOffset} 0)`}\n      ref={ref}\n      color={color}\n    />\n  );\n};\nYAxis.propTypes = propTypes;\nYAxis.defaultProps = defaultProps;\nexport default YAxis;\n\n\nconst Axis = styled.g`\n  line,\n  .domain {\n    stroke: ${(p) => p.color};\n    stroke-width: 1.5;\n  }\n  text {\n    fill: ${(p) => p.color};\n    font-weight: bold;\n  }\n  .tick {\n    &.minor {\n      line {\n        transform: scaleX(0.35);\n        stroke-width: 1;\n      }\n      text {\n        display: none;\n      }\n    }\n    &.desktop-only {\n      display: none;\n      @media screen and (min-width: 768px) {\n        display: block;\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport { axisTop, select } from 'd3';\n\nconst propTypes = {\n  compiledScale: PT.func.isRequired,\n  topOffset: PT.number,\n  color: PT.string,\n};\nconst defaultProps = {\n  topOffset: 0,\n  color: 'white',\n};\n\nconst XAxis = ({ compiledScale, topOffset, color }) => {\n  const ref = React.useRef(null);\n  const axisGen = axisTop(compiledScale);\n  select(ref.current)\n    .call(axisGen)\n    .selectAll('text')\n    .style('text-anchor', 'start')\n    .attr('dx', '1.25em')\n    .attr('dy', '0.5em')\n    .attr('transform', 'rotate(-65)');\n  return (\n    <Axis\n      transform={`translate(0 ${topOffset})`}\n      ref={ref}\n      color={color}\n    />\n  );\n};\nXAxis.propTypes = propTypes;\nXAxis.defaultProps = defaultProps;\nexport default XAxis;\n\n\nconst Axis = styled.g`\n  .domain,\n  line {\n    stroke: ${(p) => p.color};\n    stroke-width: 1.5;\n  }\n  text {\n    fill: ${(p) => p.color};\n    font-weight: bold;\n  }\n  g:nth-child(odd) {\n    text {\n      display: none;\n      @media screen and (min-width: 400px) {\n        display: block;\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport { nanoid } from 'nanoid';\n\nconst propTypes = {\n  width: PT.number.isRequired,\n  height: PT.number.isRequired,\n  leftOffset: PT.number,\n  d3Scale: PT.func.isRequired,\n  yDivisionsAmount: PT.number,\n  range: PT.oneOfType([\n    PT.arrayOf(PT.number),\n    PT.bool,\n  ]),\n  showLineExtression: PT.func,\n};\nconst defaultProps = {\n  yDivisionsAmount: 9,\n  leftOffset: 0,\n  range: false,\n  showLineExtression: (i) => i % 4 === 0,\n};\n\nconst Grid = ({\n  width,\n  height,\n  leftOffset,\n  d3Scale,\n  yDivisionsAmount,\n  range,\n  showLineExtression,\n}) => {\n  const keys = Array.from({ length: yDivisionsAmount }, () => nanoid());\n  const domain = [0, yDivisionsAmount];\n  const yRange = range || [0, height];\n  const yScale = d3Scale(domain, yRange);\n  return (\n    <GridWrap>\n      {keys.map((key, i) => (\n        showLineExtression(i) && (\n          <LineY\n            key={key}\n            x1={leftOffset}\n            y1={yScale(i)}\n            x2={leftOffset + width}\n            y2={yScale(i)}\n          />\n        )\n      ))}\n    </GridWrap>\n  );\n};\nGrid.propTypes = propTypes;\nGrid.defaultProps = defaultProps;\n\nexport default Grid;\n\nconst GridWrap = styled.g``;\nconst LineY = styled.line`\n  stroke: white;\n  stroke-width: 0.75;\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport { region as regionDef } from 'modeling/knifeCrimeDataPointsByRegion';\nimport pointDef from 'modeling/dataPoint';\n\nconst propTypes = {\n  height: PT.number.isRequired,\n  getTimeObj: PT.func.isRequired,\n  compiledXScale: PT.func.isRequired,\n  compiledYScale: PT.func.isRequired,\n  activeData: regionDef.isRequired,\n  onSelectedPointChange: PT.func,\n  selectedPoint: PT.oneOfType([\n    PT.bool,\n    pointDef,\n  ]).isRequired,\n};\nconst defaultProps = {\n  onSelectedPointChange: () => {},\n};\n\nconst HoverLines = ({\n  height,\n  getTimeObj,\n  compiledXScale,\n  compiledYScale,\n  activeData,\n  onSelectedPointChange,\n  selectedPoint,\n}) => {\n  const [range1, range2] = compiledXScale.range();\n  const width = range2 - range1;\n  const tickWidth = width / activeData.points.length;\n  const handleMouseLeave = () => onSelectedPointChange(false);\n  return (\n    <HoverLinesWrap>\n      {activeData.points.map((point) => {\n        const {\n          year,\n          quarter,\n          knifeCrime,\n        } = point;\n        const xPos = compiledXScale(getTimeObj(point));\n        const yPos = compiledYScale(knifeCrime);\n        const handleMouseEnter = () => onSelectedPointChange(point);\n        return (\n          <Point\n            key={`${year}-${quarter}`}\n            className={selectedPoint === point ? 'active' : ''}\n          >\n            <Line\n              x1={xPos}\n              y1={height * 0.1}\n              x2={xPos}\n              y2={height * 0.99}\n            />\n            <Circle\n              r={3}\n              cx={xPos}\n              cy={yPos}\n            />\n            <Hover\n              x={xPos - (tickWidth / 2)}\n              y={0}\n              height={height}\n              width={tickWidth}\n              onMouseLeave={handleMouseLeave}\n              onMouseEnter={handleMouseEnter}\n            />\n          </Point>\n        );\n      })}\n    </HoverLinesWrap>\n  );\n};\nHoverLines.propTypes = propTypes;\nHoverLines.defaultProps = defaultProps;\nexport default React.memo(HoverLines, (prevProps, newProps) => {\n  // console.log('prevProps.selectedPoint: %o', prevProps.selectedPoint);\n  // console.log('newProps: %o', newProps);\n  // console.log('');\n  return prevProps.selectedPoint !== newProps.selectedPoint;\n});\n\n\nconst HoverLinesWrap = styled.g``;\nconst Point = styled.g`\n  opacity: 0;\n  &:hover {\n    opacity: 1;\n  }\n`;\nconst Hover = styled.rect`\n  fill: black;\n  opacity: 0;\n`;\nconst Line = styled.line`\n  stroke: white;\n`;\nconst Circle = styled.circle`\n  fill: white;\n  /* transform: translateY(-10px);\n  transition: transform 100ms;\n  ${Point}:hover & {\n    transform: translateY(0);\n  } */\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport quarterlyAveragesDef from 'modeling/quarterlyAverages';\nimport { line } from 'd3';\nimport { getTimeObj } from './helpers';\n\nconst propTypes = {\n  data: quarterlyAveragesDef.isRequired,\n  compiledXScale: PT.func.isRequired,\n  compiledYScale: PT.func.isRequired,\n};\n\nconst QuarterlyAverageLine = ({\n  data,\n  compiledXScale,\n  compiledYScale,\n}) => {\n  const thePath = line()(data.map((point) => ([\n    compiledXScale(getTimeObj(point)),\n    compiledYScale(point.knifeCrime),\n  ])));\n\n  return (\n    <QuarterlyAverageLineEl d={thePath} />\n  );\n};\nQuarterlyAverageLine.propTypes = propTypes;\n\nexport default QuarterlyAverageLine;\n\nconst QuarterlyAverageLineEl = styled.path`\n  stroke: white;\n  stroke-dasharray: 4;\n  fill: none;\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport pointDef from 'modeling/dataPoint';\nimport { useSpring, animated } from 'react-spring';\nimport Countup from 'react-countup';\n\nconst propTypes = {\n  getTimeObj: PT.func.isRequired,\n  compiledXScale: PT.func.isRequired,\n  compiledYScale: PT.func.isRequired,\n  selectedPoint: PT.oneOfType([\n    PT.bool,\n    pointDef,\n  ]).isRequired,\n};\n\nconst Tooltip = ({\n  getTimeObj,\n  compiledXScale,\n  compiledYScale,\n  selectedPoint,\n}) => {\n  const {\n    year,\n    quarter,\n    knifeCrime,\n  } = selectedPoint;\n\n  const springConfig = {\n    mass: 1,\n    tension: 400,\n    friction: 30,\n    velocity: 0,\n  };\n\n  const {\n    x: springX,\n    y: springY,\n  } = useSpring({\n    x: selectedPoint ? compiledXScale(getTimeObj(selectedPoint)) + 5 : 0,\n    y: compiledYScale(knifeCrime) || 0,\n    from: { x: 0, y: 0 },\n    config: springConfig,\n  });\n\n  const width = 115;\n  const height = 60;\n  const scaleMulti = 0.8;\n  const scaledWidth = width * scaleMulti;\n  const scaledHeight = height * scaleMulti;\n  const fontSize = 16 * scaleMulti;\n\n  return (\n    selectedPoint ? (\n      <TooltipWrap>\n        <Bg\n          x={springX}\n          y={springY.interpolate((intVal) => intVal - (scaledHeight / 2))}\n          width={scaledWidth}\n          height={scaledHeight}\n        />\n        <Year\n          fontSize={fontSize}\n          x={springX.interpolate((intVal) => intVal + 10)}\n          y={springY}\n          dy=\"-0.2em\"\n        >\n          {year} &ndash; {quarter}\n        </Year>\n        <Stat\n          fontSize={fontSize}\n          x={springX.interpolate((intVal) => intVal + 10)}\n          y={springY}\n          dy=\"1em\"\n        >\n          <Countup\n            duration={0.25}\n            delay={0}\n            end={knifeCrime}\n            separator=\",\"\n            preserveValue\n          >\n            {({ countUpRef }) => (\n              <>\n                <tspan>Incidents: </tspan>\n                <tspan ref={countUpRef} />\n              </>\n            )}\n          </Countup>\n        </Stat>\n      </TooltipWrap>\n    ) : null\n  );\n};\nTooltip.propTypes = propTypes;\nexport default Tooltip;\n\n\nconst TooltipWrap = styled.g`\n  fill: black;\n  pointer-events: none;\n`;\nconst Bg = styled(animated.rect)`\n  fill: white;\n`;\nconst Year = styled(animated.text)`\n  font-weight: bold;\n`;\nconst Stat = styled(animated.text)`\n  fill: black;\n  color: black;\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled, { keyframes } from 'styled-components/macro';\nimport { region as regionDef } from 'modeling/knifeCrimeDataPointsByRegion';\nimport quarterlyAveragesDef from 'modeling/quarterlyAverages';\nimport pointDef from 'modeling/dataPoint';\nimport Animator from 'components/Animator';\nimport {\n  scaleSymlog,\n  scaleLinear,\n  scaleTime,\n  extent,\n  // line,\n  // curveBundle,\n} from 'd3';\nimport {\n  getXScale,\n  getYScale,\n  getTimeObj,\n  getContinuousPath,\n  genPoints,\n} from './helpers/index.js';\nimport YAxis from './YAxis';\nimport XAxis from './XAxis';\nimport Grid from './Grid';\nimport HoverLines from './HoverLines';\nimport QuarterlyAverageLine from './QuarterlyAverageLine';\nimport Tooltip from './Tooltip';\n\nconst propTypes = {\n  activeData: regionDef.isRequired,\n  allData: PT.arrayOf(regionDef).isRequired,\n  avgData: quarterlyAveragesDef.isRequired,\n  width: PT.number,\n  height: PT.number,\n  pathCreators: PT.shape({\n    getCollarPath: PT.func.isRequired,\n    getGraphPath: PT.func.isRequired,\n    getHandlePath: PT.func.isRequired,\n    getTipPath: PT.func.isRequired,\n  }).isRequired,\n  onSelectedPointChange: PT.func,\n  selectedPoint: PT.oneOfType([\n    PT.bool,\n    pointDef,\n  ]).isRequired,\n};\n\nconst defaultProps = {\n  width: 0,\n  height: 0,\n  onSelectedPointChange: () => {},\n};\n\nconst Svg = ({\n  activeData,\n  allData,\n  avgData,\n  width,\n  height,\n  pathCreators,\n  onSelectedPointChange,\n  selectedPoint,\n}) => {\n  const [\n    useLogScale,\n    // setUseLogScale,\n  ] = React.useState(false);\n  const activeYScale = useLogScale ? scaleSymlog : scaleLinear;\n\n  const pad = 50;\n  const innerWidth = Math.max(width - (pad * 2), 0);\n  const innerHeight = Math.max(height - (pad * 2), 0);\n\n  const cappedInnerHeight = Math.min(innerHeight, innerWidth * 0.2);\n\n  const widthPercentages = {\n    tip: 25,\n    graph: 40,\n    collar: 3,\n    handle: 32,\n  };\n  const getWidth = (...names) => {\n    const flatArraySafe = Array.isArray(names[0]) ? names[0] : names;\n    return flatArraySafe.reduce((acc, item) => (\n      acc + (innerWidth * widthPercentages[item]) / 100\n    ), 0);\n  };\n\n  const joinPaths = (...paths) => {\n    const joined = paths.reduce((acc, path) => (\n      `${acc} ${path}`\n    ), '');\n    return joined;\n  };\n\n  const xScale = getXScale(\n    getWidth('graph'),\n    activeData,\n    getTimeObj,\n    scaleTime,\n    getWidth('tip'),\n  );\n  const yScaleRange = [cappedInnerHeight * 0.1, cappedInnerHeight * 1.1];\n  const yScale = getYScale(\n    cappedInnerHeight,\n    allData,\n    extent,\n    activeYScale,\n    yScaleRange,\n    // scaleLinear;\n  );\n\n  const tipPathSection = pathCreators.getTipPath({\n    width: getWidth('tip'),\n    height: cappedInnerHeight,\n  });\n  const graphPathSection = pathCreators.getGraphPath({\n    activeData,\n    xScale,\n    yScale,\n    getTimeObj,\n    getContinuousPath,\n    genPoints,\n  });\n  const collarPathSection = pathCreators.getCollarPath({\n    width: getWidth('collar'),\n    height: cappedInnerHeight,\n    leftOffset: getWidth('tip', 'graph'),\n  });\n  const handlePathSection = pathCreators.getHandlePath({\n    width: getWidth('handle'),\n    height: cappedInnerHeight,\n    leftOffset: getWidth('tip', 'graph', 'collar'),\n    getContinuousPath,\n  });\n\n  const compPath = joinPaths(\n    tipPathSection,\n    graphPathSection,\n    collarPathSection,\n    handlePathSection,\n  );\n\n  const axisColor = 'white';\n\n  // const charLineGen = line().curve(curveBundle.beta(0.7));\n  // const chartLinePath = charLineGen(genPoints(activeData, xScale, getTimeObj, yScale));\n\n  return (\n    <SvgEl>\n      <CenterTransform transform={`translate(0 ${(innerHeight - cappedInnerHeight) / 2})`}>\n        <PadTransform transform={`translate(${pad} ${pad})`}>\n          <TipFix d={`${tipPathSection} z`} />\n          <AnimatorStyled path={compPath} />\n          <YAxis\n            compiledScale={yScale}\n            leftOffset={getWidth('tip') * 0.96}\n            color={axisColor}\n          />\n          <XAxis\n            compiledScale={xScale}\n            topOffset={cappedInnerHeight * -0.05}\n            color={axisColor}\n          />\n          <Grid\n            width={getWidth('graph')}\n            height={cappedInnerHeight}\n            leftOffset={getWidth('tip')}\n            d3Scale={activeYScale}\n            range={yScaleRange}\n          />\n          <QuarterlyAverageLine\n            data={avgData}\n            compiledXScale={xScale}\n            compiledYScale={yScale}\n          />\n          <HoverLines\n            height={cappedInnerHeight}\n            getTimeObj={getTimeObj}\n            compiledXScale={xScale}\n            compiledYScale={yScale}\n            activeData={activeData}\n            onSelectedPointChange={onSelectedPointChange}\n            selectedPoint={selectedPoint}\n          />\n          {/* <ChartLine d={chartLinePath} /> */}\n          <Tooltip\n            getTimeObj={getTimeObj}\n            compiledXScale={xScale}\n            compiledYScale={yScale}\n            selectedPoint={selectedPoint}\n          />\n        </PadTransform>\n      </CenterTransform>\n    </SvgEl>\n  );\n};\nSvg.propTypes = propTypes;\nSvg.defaultProps = defaultProps;\n\nexport default Svg;\n\nconst SvgEl = styled.svg`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst TipFix = styled.path`\n  fill: #f42;\n  animation: ${keyframes`\n    from { opacity: 0 }\n    to { opacity: 1 }\n  `} 0.5s 1s linear both;\n`;\nconst PadTransform = styled.g``;\nconst CenterTransform = styled.g``;\nconst AnimatorStyled = styled(Animator)`\n  fill: #f42;\n`;\n\n// const ChartLine = styled.path`\n//   stroke: white;\n//   stroke-width: 1.5;\n//   stroke-dasharray: 5, 2;\n//   fill: none;\n// `;\n","const getCollar = ({ width: w, height: h, leftOffset: l }) => {\n  const radius = w * 0.25;\n  const pathSection = `\n    L ${l} ${h}\n    H ${l + w - radius}\n  `;\n\n  return pathSection;\n};\n\nexport default getCollar;\n","import { line } from 'd3';\n\nconst getGraph = ({\n  activeData,\n  xScale,\n  yScale,\n  getTimeObj,\n  getContinuousPath,\n  genPoints,\n}) => {\n  // const valDomain = extent(data.points.map(({ knifeCrime }) => knifeCrime));\n  const pathSection = line()(genPoints(activeData, xScale, getTimeObj, yScale));\n  return getContinuousPath(pathSection);\n};\n\nexport default getGraph;\n","import svgpath from 'svgpath';\n\nconst getHandle = ({\n  width,\n  height,\n  leftOffset,\n  getContinuousPath,\n}) => {\n  const pathData = 'M0,184.79c0,0,0,0,8.18,0c9.77,0,27.46-11.73,27.46-61.57c0,0-3.15-33.56,31.6-33.56s19.55,0,41.7,0s97.74,9.77,131.62,9.77 s65.81-12.38,102.95-12.38s60.6,14.99,76.24,22.15c15.64,7.17,28.67-2.61,44.31-10.43s37.14-23.46,43.66-35.84 s5.86-20.85-4.89-27.69C393.03-4.82,311.58-9.38,123.6,14.73C64.96,23.53,0,20.6,0,20.6';\n  const pathDataActualWidth = 512;\n  const pathDataActualHeight = 185;\n  const scaleFactor = Math.min(\n    width / pathDataActualWidth,\n    height / pathDataActualHeight,\n  );\n  const scaledPath = svgpath(pathData)\n    .scale(scaleFactor)\n    .translate(leftOffset)\n    .toString();\n  const scaledPathContinuous = getContinuousPath(scaledPath, true, false);\n  const scaledPathContinuousClosed = `${scaledPathContinuous}z`;\n  return scaledPathContinuousClosed;\n};\n\nexport default getHandle;\n","const getTip = ({ width: w, height: h }) => {\n  const areaPath = `\n    M ${w} 0\n    H 0\n    C ${w / 2} ${h}, ${w} ${h}, ${w} ${h}\n  `;\n\n  return areaPath;\n};\n\nexport default getTip;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { region as regionDef } from 'modeling/knifeCrimeDataPointsByRegion';\nimport quarterlyAveragesDef from 'modeling/quarterlyAverages';\nimport Svg from './Svg';\nimport {\n  collar as getCollarPath,\n  graph as getGraphPath,\n  handle as getHandlePath,\n  tip as getTipPath,\n} from './pathSections';\n\nconst propTypes = {\n  activeData: regionDef.isRequired,\n  allData: PT.arrayOf(regionDef).isRequired,\n  avgData: quarterlyAveragesDef.isRequired,\n};\n\nconst KnifeGraph = ({ activeData, allData, avgData }) => {\n  const [selectedPoint, setSelectedPoint] = React.useState(false);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const handleResize = (newWidth, newHeight) => {\n    setWidth(newWidth);\n    setHeight(newHeight);\n  };\n  const handleSelectedPointChange = (point) => setSelectedPoint(point);\n\n  const pathCreators = {\n    getCollarPath,\n    getGraphPath,\n    getHandlePath,\n    getTipPath,\n  };\n  return (\n    <KnifeGraphWrap>\n      <ReactResizeDetector handleWidth handleHeight onResize={handleResize}>\n        <Svg\n          width={width}\n          height={height}\n          activeData={activeData}\n          allData={allData}\n          avgData={avgData}\n          pathCreators={pathCreators}\n          selectedPoint={selectedPoint}\n          onSelectedPointChange={handleSelectedPointChange}\n        />\n      </ReactResizeDetector>\n    </KnifeGraphWrap>\n  );\n};\nKnifeGraph.propTypes = propTypes;\nexport default KnifeGraph;\n\nconst KnifeGraphWrap = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: rotate(5deg);\n`;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    min-height: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    font-size: 10px;\n  }\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: Oswald;\n    font-size: 1.6rem;\n  }\n  body,\n  #root {\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components/macro';\nimport Select from 'react-select';\n\nconst propTypes = {\n  names: PT.arrayOf(PT.string).isRequired,\n  onChange: PT.func.isRequired,\n  selectedRegion: PT.string.isRequired,\n};\n\nconst RegionSelector = ({ names, onChange, selectedRegion }) => {\n  const options = names.map((name) => ({ value: name, label: name })).reverse();\n  const handleChange = ({ value }) => onChange(value);\n  return (\n    <RegionSelectorWrap>\n      <Select\n        options={options}\n        onChange={handleChange}\n        isSearchable={false}\n        value={{\n          label: selectedRegion,\n          value: selectedRegion,\n        }}\n      />\n    </RegionSelectorWrap>\n  );\n};\nRegionSelector.propTypes = propTypes;\n\nexport default RegionSelector;\n\nconst RegionSelectorWrap = styled.div``;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport KnifeGraph from 'components/KnifeGraph';\nimport data from 'data/data.json';\nimport GlobalStyle from 'globalStyle';\nimport RegionSelector from 'components/RegionSelector';\n\nfunction App() {\n  const [selectedRegion, setSelectedRegion] = React.useState('London');\n  const selectedRegionData = data.knifeCrimeDataPointsByRegion.find(({ name }) => (\n    name === selectedRegion\n  ));\n  const onRegionChange = (name) => setSelectedRegion(name);\n  return (\n    <AppWrap>\n      <Header>\n        <Titling>\n          <Title>{selectedRegion}</Title>\n          <Subtitle>Knife crime incidents over time</Subtitle>\n        </Titling>\n        <RegionSelectorWrap>\n          <RegionSelector\n            names={data.knifeCrimeDataPointsByRegion.map(({ name }) => name)}\n            onChange={onRegionChange}\n            selectedRegion={selectedRegion}\n          />\n        </RegionSelectorWrap>\n      </Header>\n      <GraphWrap>\n        <Decoration />\n        <KnifeGraph\n          activeData={selectedRegionData}\n          allData={data.knifeCrimeDataPointsByRegion}\n          avgData={data.quarterlyAverages}\n        />\n      </GraphWrap>\n      <GlobalStyle />\n    </AppWrap>\n  );\n}\n\nexport default App;\n\nconst AppWrap = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex: 1 1 auto;\n  background-color: #222;\n  color: white;\n  padding: 20px;\n  overflow: hidden;\n  @media screen and (min-width: 768px) {\n    padding: 40px;\n  }\n`;\nconst Header = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n`;\nconst Titling = styled.div``;\nconst Title = styled.h1`\n  margin: 0;\n  font-size: 3rem;\n  font-weight: 900;\n  line-height: 1.2em;\n`;\nconst Subtitle = styled.h2`\n  margin: 0;\n  font-size: 2rem;\n  font-weight: 400;\n  line-height: 1.2em;\n`;\nconst RegionSelectorWrap = styled.div`\n  width: 10em;\n  max-width: 100%;\n  color: black;\n  margin-top: 20px;\n  @media screen and (min-width: 500px) {\n    margin-top: 0;\n  }\n`;\nconst GraphWrap = styled.div`\n  position: relative;\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  align-items: center;\n`;\nconst Decoration = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 40%;\n  height: 0;\n  padding-bottom: 40%;\n  border-radius: 50%;\n  background-color: #2b2b2b;\n  transform: translate(-50%, -50%);\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}