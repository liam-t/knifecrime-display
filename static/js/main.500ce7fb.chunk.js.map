{"version":3,"sources":["modeling/knifeCrimeDataPointsByRegion/point.js","modeling/knifeCrimeDataPointsByRegion/index.js","components/RegionGraph.jsx","globalStyle.js","components/RegionSelector.jsx","App.jsx","serviceWorker.js","index.js"],"names":["point","PT","shape","year","string","isRequired","quarter","oneOf","knifeCrime","number","region","total","name","points","arrayOf","RegionGraph","data","decoratve","React","useState","width","setWidth","height","setHeight","innerWidth","pad","innerHeight","getTimeObj","split","month","Date","valDdomain","extent","map","timeDomain","length","xRange","yRange","xScale","scaleTime","yScale","scaleLinear","radiusScale","genPoints","getBundleLine","beta","line","curve","curveBundle","xAxisRef","useRef","axisBottom","xAxisGen","select","current","yAxisRef","axisLeft","ticks","tickPadding","yAxisGen","RegionGraphWrap","handleWidth","handleHeight","onResize","newWidth","newHeight","Svg","PadTransform","transform","Xaxis","ref","Yaxis","Array","fill","_","i","LinePath","key","d","opacity","Circle","r","cx","cy","onClick","defaultProps","styled","div","svg","g","circle","path","GlobalStyle","createGlobalStyle","RegionSelector","names","onChange","selectedRegion","options","value","label","reverse","RegionSelectorWrap","App","setSelectedRegion","isDecorativeGraph","selectedRegionData","knifeCrimeDataPointsByRegion","find","AppWrap","Header","Titling","Title","Subtitle","GraphWrap","h1","h2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.500ce7fb.chunk.js","sourcesContent":["import PT from 'prop-types';\n\nconst point = PT.shape({\n  year: PT.string.isRequired,\n  quarter: PT.oneOf(['Q1', 'Q2', 'Q3', 'Q4']).isRequired,\n  knifeCrime: PT.number.isRequired,\n});\n\nexport default point;\n","import PT from 'prop-types';\nimport point from './point.js';\n\nexport const region = PT.shape({\n  total: PT.number.isRequired,\n  name: PT.string.isRequired,\n  points: PT.arrayOf(point).isRequired,\n});\n\nexport default PT.arrayOf(region);\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  scaleLinear,\n  scaleTime,\n  extent,\n  line,\n  curveBundle,\n  select,\n  axisBottom,\n  axisLeft,\n} from 'd3';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { region as regionDef } from 'modeling/knifeCrimeDataPointsByRegion/index.js';\n\nconst propTypes = {\n  data: regionDef.isRequired,\n  decoratve: PT.bool,\n};\nconst defaultProps = {\n  decoratve: false,\n};\n\nconst RegionGraph = ({\n  data,\n  decoratve,\n}) => {\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const pad = 40;\n  const innerWidth = width - (pad * 2);\n  const innerHeight = height - (pad * 2);\n  const handleResize = (newWidth, newHeight) => {\n    setWidth(newWidth);\n    setHeight(newHeight);\n  };\n  const clickHandleCircle = () => {};\n\n  const getTimeObj = (point) => {\n    const [year] = point.year.split('/');\n    const month = (point.quarter.split('')[1] * 3) - 1;\n    return new Date(year, month);\n  };\n\n  const valDdomain = extent(data.points.map(({ knifeCrime }) => knifeCrime));\n  const timeDomain = [getTimeObj(data.points[0]), getTimeObj(data.points[data.points.length - 1])];\n  const xRange = [0, innerWidth];\n  const yRange = [innerHeight, 0];\n  const xScale = scaleTime(timeDomain, xRange);\n  const yScale = scaleLinear(valDdomain, yRange);\n\n  const radiusScale = scaleLinear(valDdomain, [2, 6]);\n  const genPoints = data.points.map((point) => (\n    [xScale(getTimeObj(point)), yScale(point.knifeCrime)]\n  ));\n  const getBundleLine = (points = genPoints, beta = 0.8) => (\n    line().curve(curveBundle.beta(beta))(points)\n  );\n\n  const xAxisRef = React.useRef(null);\n  const xAxisGen = axisBottom(xScale);\n  xAxisGen(select(xAxisRef.current));\n\n  const yAxisRef = React.useRef(null);\n  const yAxisGen = axisLeft(yScale)\n    .ticks(20, 's')\n    .tickPadding(5);\n  yAxisGen(select(yAxisRef.current));\n\n  return (\n    <RegionGraphWrap>\n      <ReactResizeDetector handleWidth handleHeight onResize={handleResize}>\n        <Svg>\n          <PadTransform transform={`translate(${pad} ${pad})`}>\n            <Xaxis ref={xAxisRef} transform={`translate(0 ${innerHeight})`} />\n            <Yaxis ref={yAxisRef} />\n            {decoratve ? (\n              new Array(11).fill(0).map((_, i) => (\n                <LinePath\n                  key={i}\n                  d={getBundleLine(genPoints, i * 0.1)}\n                  opacity={(i + 1) * 0.1}\n                  // strokeWidth={(i + 1) * 0.15}\n                />\n              ))\n            ) : (\n              <LinePath d={line()(genPoints)} />\n            )}\n            {data.points.map((point) => {\n              const { year, quarter, knifeCrime } = point;\n              return (\n                <Circle\n                  key={`${year}-${quarter}`}\n                  r={radiusScale(knifeCrime)}\n                  cx={xScale(getTimeObj(point))}\n                  cy={yScale(knifeCrime)}\n                  fill=\"black\"\n                  onClick={() => clickHandleCircle({ year, quarter, knifeCrime })}\n                />\n              );\n            })}\n          </PadTransform>\n        </Svg>\n      </ReactResizeDetector>\n    </RegionGraphWrap>\n  );\n};\nRegionGraph.propTypes = propTypes;\nRegionGraph.defaultProps = defaultProps;\n\nexport default RegionGraph;\n\nconst RegionGraphWrap = styled.div`\n  flex: 1 0 auto;\n  position: relative;\n  width: 900px;\n  max-width: 100%;\n  min-height: 400px;\n  max-height: 500px;\n  display: flex;\n  flex-direction: column;\n`;\nconst Svg = styled.svg`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst Xaxis = styled.g`\n  .domain {\n    stroke-width: 3px;\n  }\n`;\nconst Yaxis = styled.g`\n  .domain {\n    stroke-width: 3px;\n  }\n`;\nconst PadTransform = styled.g``;\nconst Circle = styled.circle`\n  stroke: black;\n  stroke-width: 1;\n  fill: white;\n  cursor: pointer;\n`;\nconst LinePath = styled.path`\n  stroke: black;\n  fill: none;\n`;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    min-height: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    font-size: 10px;\n  }\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: Oswald;\n    font-size: 1.6rem;\n  }\n  body,\n  #root {\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport PT from 'prop-types';\nimport styled from 'styled-components';\nimport Select from 'react-select';\n\nconst propTypes = {\n  names: PT.arrayOf(PT.string).isRequired,\n  onChange: PT.func.isRequired,\n  selectedRegion: PT.string.isRequired,\n};\n\nconst RegionSelector = ({ names, onChange, selectedRegion }) => {\n  const options = names.map((name) => ({ value: name, label: name })).reverse();\n  const handleChange = ({ value }) => onChange(value);\n  return (\n    <RegionSelectorWrap>\n      <Select\n        options={options}\n        onChange={handleChange}\n        value={{\n          label: selectedRegion,\n          value: selectedRegion,\n        }}\n      />\n    </RegionSelectorWrap>\n  );\n};\nRegionSelector.propTypes = propTypes;\n\nexport default RegionSelector;\n\nconst RegionSelectorWrap = styled.div``;\n","import React from 'react';\nimport styled from 'styled-components';\nimport RegionGraph from 'components/RegionGraph.jsx';\nimport data from 'data/data.json';\nimport GlobalStyle from 'globalStyle';\nimport RegionSelector from 'components/RegionSelector';\n\nfunction App() {\n  const [selectedRegion, setSelectedRegion] = React.useState('London');\n  const [isDecorativeGraph] = React.useState(true);\n  const selectedRegionData = data.knifeCrimeDataPointsByRegion.find(({ name }) => (\n    name === selectedRegion\n  ));\n  const onRegionChange = (name) => setSelectedRegion(name);\n  return (\n    <AppWrap>\n      <Header>\n        <Titling>\n          <Title>{selectedRegion}</Title>\n          <Subtitle>Knife crime over time</Subtitle>\n        </Titling>\n        <RegionSelectorWrap>\n          <RegionSelector\n            names={data.knifeCrimeDataPointsByRegion.map(({ name }) => name)}\n            onChange={onRegionChange}\n            selectedRegion={selectedRegion}\n          />\n        </RegionSelectorWrap>\n      </Header>\n      <GraphWrap>\n        <RegionGraph\n          data={selectedRegionData}\n          decoratve={isDecorativeGraph}\n        />\n      </GraphWrap>\n      <GlobalStyle />\n    </AppWrap>\n  );\n}\n\nexport default App;\n\nconst AppWrap = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex: 1 1 auto;\n  background-color: #ffd;\n  padding: 20px;\n  @media screen and (min-width: 768px) {\n    padding: 40px;\n  }\n`;\nconst Header = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n`;\nconst Titling = styled.div``;\nconst Title = styled.h1`\n  margin: 0;\n  font-size: 3rem;\n  font-weight: 900;\n  line-height: 1.2em;\n`;\nconst Subtitle = styled.h2`\n  margin: 0;\n  font-size: 2rem;\n  font-weight: 400;\n  line-height: 1.2em;\n`;\nconst RegionSelectorWrap = styled.div`\n  width: 10em;\n  max-width: 100%;\n`;\nconst GraphWrap = styled.div`\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  align-items: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}